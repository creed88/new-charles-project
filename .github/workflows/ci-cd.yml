name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install frontend dependencies
      run: npm install
      working-directory: frontend
    - name: Install backend dependencies
      run: npm install
      working-directory: backend
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build and push frontend image
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/frontend:latest ./frontend
        docker push ${{ steps.login-ecr.outputs.registry }}/frontend:latest
    - name: Scan frontend image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/frontend:latest
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
    - name: Build and push backend image
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/backend:latest ./backend
        docker push ${{ steps.login-ecr.outputs.registry }}/backend:latest
    - name: Scan backend image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/backend:latest
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
    - name: Deploy to EKS
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
      run: |
        echo "$KUBECONFIG" > kubeconfig
        kubectl apply -f k8s/frontend-deployment.yaml --kubeconfig kubeconfig
        kubectl apply -f k8s/backend-deployment.yaml --kubeconfig kubeconfig
        kubectl apply -f k8s/ingress.yaml --kubeconfig kubeconfig
